name: Build & Push to GitHub Container Registry

on:

  push:
    branches: [ "main" ] # mainブランチにプッシュされたときにトリガー
  pull_request:
    branches: [ "main" ] # mainブランチへのプルリクエストがあったときにトリガー
  workflow_dispatch: # 手動実行を可能にする


env:
  # イメージ名はリポジトリ名と一致させるのが一般的
  # ここでは小文字に変換しています。
  IMAGE_NAME: chromedp_test # イメージ名（リポジトリ名）

jobs:
  build_and_push_image:
    # runs-on: ubuntu-latest # ジョブを実行するOS
    runs-on: self-hosted # ここが重要！Self-hosted runner を指定



    permissions:
      contents: read       # コードを読み取る権限
      packages: write      # GHCRにパッケージ（イメージ）を書き込む権限

    steps:
    - name: Checkout repository # リポジトリをチェックアウト
      uses: actions/checkout@v4



      # 👇 ここから新しいステップを追加します！

      # 👆 ここまで新しいステップ
    # - name: Log in to the Container registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }} #
    - name: Manual Docker Login to GHCR
      run: |
        # GitHub ActionsのGITHUB_TOKENをパスワードとして使用し、GHCRにログイン
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin



    # - name: cloudflare login
    #   uses: cloudflare/wrangler-action@v3
    #   with:
    #     apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}



    # 👇 ここに新しいステップを追加します！
    - name: Set IMAGE_NAME for Docker Compose
      run: |
        # GHCRにプッシュされたイメージのフルパスを環境変数に設定
        echo "IMAGE_NAME=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
        echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME_VAR }}" >> $GITHUB_ENV
      


    - name: Build and push Docker image # DockerイメージをビルドしてGHCRにプッシュ
      uses: docker/build-push-action@v5
      with:
        context: . # Dockerfileがあるディレクトリ
        push: true # GHCRにプッシュする
        tags: |
          ghcr.io/${{ github.repository }}:${{ github.sha }}
          ghcr.io/${{ github.repository }}:latest  


    - name: Build and Push Docker image to Cloudflare Registry
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      # run: | 
      #   docker tag ghcr.io/${{ github.repository }}:latest test-image:latest
      #   wrangler containers push test-image:latest
      run: | 
        ls
        wrangler containers build . --push --tag test-image:latest

    - name: list docker-compose files # docker-composeファイルをリスト
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      run: |
        # /app/docker-composeディレクトリに移動して、ファイルをリスト
        ls -l
    - name: restart docker-compose # Docker Composeを再起動
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      run: |
        ls
        # Docker Composeを使用してサービスを再起動
        docker-compose down && docker-compose pull && docker-compose up -d
        # docker compose -f /app/docker-compose/docker-compose.yaml down && docker compose -f /app/docker-compose/docker-compose.yaml pull && docker compose -f /app/docker-compose/docker-compose.yaml up -d
        # docker compose -f /app/docker-compose/docker-compose.yml down && docker compose -f /app/docker-compose/docker-compose.yml pull && docker compose -f /app/docker-compose/docker-compose.yml up -d
        # docker compose -f /app/docker-compose.yml down && docker compose -f /app/docker-compose.yml pull && docker compose -f /app/docker-compose.yml up -d
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4' # 使用するGoのバージョンを指定

    - name: Get Go dependencies and tidy modules
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      run: go mod tidy # go build の前に実行することで、依存関係を確実に解決

    - name: Build Go application for Windows
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      run: |
        GOOS=windows GOARCH=amd64 go build  -ldflags="-H windowsgui" -o chromeDB.exe . # 実行ファイルを ./build/my_app としてビルド

    - name: Upload Linux Binary as Artifact # ★ ここが actions/upload-artifact の使用箇所 ★
      uses: actions/upload-artifact@v4
      working-directory: /actions-runner/_work/chromedp_test/chromedp_test
      with:
        name: windows-app-binary # このアーティファクトの名前
        path: ./chromeDB.exe  
    # - name: Log in to the Container registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }} # これが重要
        

    # - name: Set up Docker Buildx # Docker Buildx をセットアップ
    #   uses: docker/setup-buildx-action@v3

    # - name: Build and push Docker image # DockerイメージをビルドしてGHCRにプッシュ
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: . # Dockerfileがあるディレクトリ
    #     push: true # GHCRにプッシュする
    #     tags: |
    #       ghcr.io/${{ github.repository }}:${{ github.sha }} # コミットSHAをタグとして使用
    #       ghcr.io/${{ github.repository }}:latest          
        # build-args: | # <-- このセクションを追加
        #   GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}